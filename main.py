import telebot
import json
import os
import re
import threading
import time
from datetime import datetime
from telebot import types
from collections import defaultdict

# ============ –ù–ê–°–¢–†–û–ô–ö–ò ============

TOKEN = os.getenv('TOKEN')
CHANNEL_ID = '-1002495576009'

ALLOWED_USERS_FILE = 'allowed_users.json'
ADMINS_FILE = 'admins.txt'
LOCAL_REPORTS_BASE = 'reports'

user_data = defaultdict(lambda: {"photos": [], "comment": ""})

# ============ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ============

def sanitize_for_path(name: str) -> str:
    return re.sub(r'[\\/:*?"<>|#]', '_', name).strip()

def get_admins():
    try:
        with open(ADMINS_FILE, 'r', encoding='utf-8') as f:
            return set(f.read().split())
    except FileNotFoundError:
        return set()

def get_allowed_users():
    try:
        with open(ALLOWED_USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}

def save_allowed_users(users):
    with open(ALLOWED_USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=4)

def is_admin(user_id):
    return str(user_id) in get_admins()

def is_user_allowed(user_id):
    return str(user_id) in get_allowed_users()

def get_user_name(user_id):
    users = get_allowed_users()
    return users.get(str(user_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")

def save_photos_thread(photos, safe_user_name, safe_comment, chat_id_str, timestamp):
    report_folder = os.path.join(LOCAL_REPORTS_BASE, safe_user_name, safe_comment)
    os.makedirs(report_folder, exist_ok=True)
    for idx, file_id in enumerate(photos, start=1):
        try:
            file_info = bot.get_file(file_id)
            file_path = file_info.file_path
            photo_data = bot.download_file(file_path)
            filename = f"{chat_id_str}-{timestamp}-{idx}.jpg"
            filepath = os.path.join(report_folder, filename)
            with open(filepath, 'wb') as f:
                f.write(photo_data)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ {file_id}: {e}")

# ============ –û–°–ù–û–í–ù–û–ô –ö–û–î –ë–û–¢–ê ============

bot = telebot.TeleBot(TOKEN)

def send_main_menu(chat_id, user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = []
    if is_admin(user_id):
        buttons.append(types.KeyboardButton("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"))
    if is_user_allowed(user_id):
        buttons.append(types.KeyboardButton("–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç"))
    markup.add(*buttons)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    send_main_menu(message.chat.id, message.from_user.id)

# ============ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ============

@bot.message_handler(func=lambda msg: msg.text == "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
def admin_panel(message):
    if not is_admin(message.from_user.id):
        return bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    markup.add("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "–ù–∞–∑–∞–¥")
def back_to_main(message):
    send_main_menu(message.chat.id, message.from_user.id)

@bot.message_handler(func=lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def add_user_request(message):
    if not is_admin(message.from_user.id):
        return bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ ID –∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: chat_id –∏–º—è"
    )
    bot.register_next_step_handler(msg, add_user_by_text)

def add_user_by_text(message):
    if not is_admin(message.from_user.id):
        return bot.reply_to(message, "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ!")
    try:
        chat_id, name = message.text.split(maxsplit=1)
        users = get_allowed_users()
        users[chat_id] = name
        save_allowed_users(users)
        bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    except ValueError:
        bot.reply_to(message, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: chat_id –∏–º—è")
    time.sleep(1)
    admin_panel(message)

@bot.message_handler(func=lambda msg: msg.text == "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def show_user_list(message):
    if not is_admin(message.from_user.id):
        return bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    users = get_allowed_users()
    if not users:
        text = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
    else:
        text = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        for uid, name in users.items():
            text += f"üÜî <code>{uid}</code> ‚Äî {name}\n"
    bot.send_message(message.chat.id, text, parse_mode='HTML')

# --- –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ ---

@bot.message_handler(func=lambda msg: msg.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
def delete_user_request(message):
    if not is_admin(message.from_user.id):
        return bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    users = get_allowed_users()
    if not users:
        return bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
    
    markup = types.InlineKeyboardMarkup()
    for uid, name in users.items():
        button = types.InlineKeyboardButton(text=name, callback_data=f"del_select_{uid}")
        markup.add(button)
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("del_select_"))
def confirm_delete_user(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    user_id_to_delete = call.data[len("del_select_"):]
    users = get_allowed_users()
    user_name = users.get(user_id_to_delete, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton(text="–î–∞", callback_data=f"del_confirm_yes_{user_id_to_delete}"),
        types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="del_confirm_no")
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_name}'?",
        reply_markup=markup
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("del_confirm_"))
def process_delete_confirmation(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    if call.data == "del_confirm_no":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        )
        bot.answer_callback_query(call.id)
        return
    
    if call.data.startswith("del_confirm_yes_"):
        user_id_to_delete = call.data[len("del_confirm_yes_"):]
        users = get_allowed_users()
        if user_id_to_delete in users:
            user_name = users.pop(user_id_to_delete)
            save_allowed_users(users)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' —É–¥–∞–ª—ë–Ω."
            )
        else:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
            )
        bot.answer_callback_query(call.id)

# ============ –û–¢–ß–Å–¢–´ ============

@bot.message_handler(func=lambda msg: msg.text == "–°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç")
def report_start(message):
    if not is_user_allowed(message.from_user.id):
        return bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    uid = str(message.from_user.id)
    user_data[uid] = {"photos": [], "comment": ""}
    msg = bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –æ–±—ä–µ–∫—Ç (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)?")
    bot.register_next_step_handler(msg, handle_comment)

def handle_comment(message):
    uid = str(message.from_user.id)
    user_data[uid]["comment"] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á—ë—Ç"))
    markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç—á—ë—Ç"))
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å, –Ω–∞–∂–º–∏ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á—ë—Ç'.", reply_markup=markup)

@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    uid = str(message.from_user.id)
    if not is_user_allowed(message.from_user.id):
        return bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ.")
    file_id = message.photo[-1].file_id
    user_data[uid]["photos"].append(file_id)

@bot.message_handler(func=lambda msg: msg.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á—ë—Ç")
def finish_report(message):
    uid = str(message.from_user.id)
    if not is_user_allowed(message.from_user.id):
        return bot.reply_to(message, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    photos = user_data[uid]["photos"]
    comment_raw = user_data[uid]["comment"]
    name_raw = get_user_name(uid)
    chat_id_str = uid

    if not photos:
        return bot.send_message(message.chat.id, "–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
    
    sending_msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∫–∞...")

    caption = f"<b>–§–æ—Ç–æ–æ—Ç—á—ë—Ç –æ—Ç {name_raw}</b>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_raw}"
    chunk_size = 10
    for i in range(0, len(photos), chunk_size):
        group = photos[i:i + chunk_size]
        media_group = []
        for j, file_id in enumerate(group):
            if j == 0:
                media_group.append(types.InputMediaPhoto(media=file_id, caption=caption, parse_mode='HTML'))
            else:
                media_group.append(types.InputMediaPhoto(media=file_id))
        bot.send_media_group(CHANNEL_ID, media_group)

    safe_user_name = sanitize_for_path(name_raw)
    safe_comment = sanitize_for_path(comment_raw)
    timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
    photos_copy = list(photos)
    user_data[uid] = {"photos": [], "comment": ""}

    t = threading.Thread(
        target=save_photos_thread,
        args=(photos_copy, safe_user_name, safe_comment, chat_id_str, timestamp),
        daemon=True
    )
    t.start()

    bot.edit_message_text("–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.", chat_id=message.chat.id, message_id=sending_msg.message_id)
    send_main_menu(message.chat.id, message.from_user.id)

@bot.message_handler(func=lambda msg: msg.text == "–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç—á—ë—Ç")
def cancel_report(message):
    uid = str(message.from_user.id)
    user_data[uid] = {"photos": [], "comment": ""}
    bot.send_message(message.chat.id, "–û—Ç—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.")
    send_main_menu(message.chat.id, message.from_user.id)

# ============ –û–°–¢–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ============

@bot.message_handler(func=lambda msg: True)
def fallback(message):
    send_main_menu(message.chat.id, message.from_user.id)

# ============ –ó–ê–ü–£–°–ö –ë–û–¢–ê ============

if __name__ == '__main__':
    if not os.path.exists(LOCAL_REPORTS_BASE):
        os.makedirs(LOCAL_REPORTS_BASE)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling()
